@page "/"
@using AzureComputerVision
@using System.IO
@inject IdleClient idleClient
@inject IConfiguration config
@inject Data.BlazorDbContext context
@inject IJSRuntime JS

<h1>Email Images Observer!</h1>

Welcome to email image observer app. Here you can watch info grab be the background process.

@if (!idleClient.IsAuthenticated)
{
    <div class="card" style="width: 18rem;">
        <div class="card-body alert-danger">
            <h5 class="card-title">The client is not authenticated</h5>
        </div>
    </div>
}
else
{
    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Space used</h5>
            <h6 class="card-subtitle mb-2 text-muted">@(config["Database:Provider"] ?? "InMemory")</h6>
            <p class="card-text">@GetSpaceUsed()</p>
        </div>
    </div>

    <div class="card" style="width: 18rem;">
        <div class="card-body">
            <h5 class="card-title">Email Sent</h5>
            <h6 class="card-subtitle mb-2 text-muted">@idleClient.MessageCount messages</h6>
            <p class="card-text">@EmailState.MessagesCount images</p>
        </div>
    </div>
}

<h2>Measure Latency</h2>

@if (latency is null)
{
    <span>Calculating...</span>
}
else
{
    <span>@(latency.Value.TotalMilliseconds)ms</span>
}

@code 
{
    public Data.EmailStates EmailState { get; set; } = new Data.EmailStates();

    protected override async Task OnInitializedAsync()
    {
        EmailState = await context.EmailStates.Where(e => e.Email == config["LoginInfo:EmailLogin"]).FirstOrDefaultAsync() ?? EmailState;
    }

    protected string GetSpaceUsed()
    {
        var size = EmailState.Size;

        if (size < 1000)
        {
            return size + " bytes";
        }
        else if (size < 10e6)
        {
            return size / 10e2 + " kB";
        }
        else if (size < 10e9)
        {
            return size / 10e5 + " mB";
        }
        else
        {
            return size / 10e8 + "gB";
        }
    }

    private DateTime startTime;
    private TimeSpan? latency;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            startTime = DateTime.UtcNow;
            var _ = await JS.InvokeAsync<string>("toString");
            latency = DateTime.UtcNow - startTime;
            StateHasChanged();
        }
    }
}