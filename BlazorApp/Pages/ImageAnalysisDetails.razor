@page "/imageanalysisdetails/{id}"
@using System.Text.Json
@using System.Text.Json.Serialization
@inject ImageInfoService imageService

<h3>Image Analysis Details</h3>
<h6>@Id</h6>

@if (ImageInfo != null)
{
    <div class="row">
        <div class="col-md-6">
            <img src="data:image/png;base64,@Convert.ToBase64String(ImageInfo?.Images ?? Array.Empty<byte>())" class="img-fluid" />
            <dl>
                <dt>Id</dt>
                <dd>@ImageInfo?.Id</dd>
                <dt>Name</dt>
                <dd>@ImageInfo?.Name</dd>
                <dt>UniqueId</dt>
                <dd>@ImageInfo?.UniqueId</dd>
                <dt>Object</dt>
                <dd>@ImageInfo?.Object</dd>
                <dt>External Owner</dt>
                <dd>@ImageInfo?.ExternalOwner</dd>
                <dt>External SubOwner</dt>
                <dd>@ImageInfo?.ExternalSubOwner</dd>
                <dt>Date Added</dt>
                <dd>@ImageInfo?.DateAjout</dd>
                <dt>Date Email</dt>
                <dd>@ImageInfo?.DateEmail</dd>
            </dl>
        </div>
        <div class="col-md-6">
            <pre class="text">
                @GetFormatedJson(ImageInfo?.ImageAnalysis)
            </pre>
        </div>
    </div>
}
else
{
    <p>Something went wrong...</p>
}

@code {
    [Parameter]
    public string Id { get; set; } = "";

    public Data.ImageInfo? ImageInfo { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        ImageInfo = await imageService.GetImageInfoAsync(long.Parse(Id));
    }

    private string GetFormatedJson(object? imageInfo)
    {
        return JsonSerializer.Serialize(imageInfo, new JsonSerializerOptions
        {
            WriteIndented = true,
            DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
        });
    }
}
