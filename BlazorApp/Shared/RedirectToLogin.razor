@inject NavigationManager Navigation
@inject AuthUrlPagesProvider AuthUrlProvider
@inject UrlService UrlService

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask == default)
        {
            throw new InvalidProgramException($"{nameof(AuthenticationStateTask)} cannot be null");
        }

        var authenticationState = await AuthenticationStateTask;

        if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
        {
            var returnUrl = UrlService.Url(Navigation.ToBaseRelativePath(Navigation.Uri));

            if (string.IsNullOrWhiteSpace(returnUrl))
            {
                if (AuthUrlProvider.Schema == "Identity.Application")
                {
                    Navigation.NavigateTo($"{UrlService.Url(AuthUrlProvider.LoginPage)}?returnUrl=/", true);
                }
                else
                {
                    Navigation.NavigateTo(UrlService.Url(AuthUrlProvider.LoginPage), true);
                }
            }
            else
            {
                Navigation.NavigateTo($"{UrlService.Url(AuthUrlProvider.LoginPage)}?returnUrl={returnUrl}", true);
            }
        }
    }
}