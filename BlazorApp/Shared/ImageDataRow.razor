@using Azure.AI.Vision.ImageAnalysis
@inject UrlService urlService
@inject TimezoneService TimezoneService

<tr id="imageinfo-@imageInfo.Id">
    <td class="">@imageInfo.Id</td>
    <td>@FormatDateTime(imageInfo.DateEmail)</td>
    <td class="">@caption</td>
    <td class="">@tags</td>
    <td>
        <img id="@string.Concat("image-id-", imageInfo.Id)" src="data:image/png;base64,@Convert.ToBase64String(imageInfo?.Images ?? Array.Empty<byte>())" class="img-thumbnail trigger-modal" onclick="window.showImageModal('@string.Concat("image-id-", imageInfo?.Id)')" />
    </td>
    <td>
        <NavLink class="btn btn-primary" href="@urlService.Url($"/imageanalysisdetails/{imageInfo?.Id}")">
            Details
        </NavLink>
        <AuthorizeView>
            <button @onclick="@(async () => await ConfirmDelete.Invoke(id, title))" class="btn btn-danger">Delete</button>
        </AuthorizeView>
    </td>
</tr>

@code {
    public long id => imageInfo.Id;

    public string title => "Delete image info " + id;

    public string? caption { get; set; }

    public string? tags { get; set; }

    [Parameter]
    public Data.ImageInfo imageInfo { get; set; } = new Data.NullImageInfo();

    [Parameter]
    public Func<long, string, Task> ConfirmDelete { get; set; } = (a, b) => Task.CompletedTask;

    public string FormatDateTime(DateTimeOffset? date)
    {
        return TimezoneService.ToPrettyLocalDate(date);
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        if (imageInfo.AITypes.Contains("AzureImageMLV2"))
        {
            var data = imageInfo.ImageAnalysis;

            if (data.HasValue && data.Value.Item1 != null)
            {
                var mlv2data = data.Value.Item1;

                caption = mlv2data.Caption?.Text + " " + (mlv2data.Caption?.Confidence != null ? Math.Round(mlv2data.Caption.Confidence, 2) * 100 + "%" : "");

                if (mlv2data.Tags?.Values.Count > 0)
                {
                    tags = (mlv2data.Tags.Values as IEnumerable<DetectedTag>)?.Aggregate<DetectedTag, string>("", (a, b) => string.Concat(a, ", ", b.Name));
                }
            }
            
        }
        else if (imageInfo.AITypes.Contains("AzureImageML"))
        {
            var data = imageInfo.ImageAnalysis.HasValue ? imageInfo.ImageAnalysis.Value.Item2 : null;

            caption = (data?.Description.Captions as IEnumerable<dynamic>)?.Select(a => $"{a.Text} ({Math.Round(a.Confidence * 100, 2)}%)").DefaultIfEmpty(string.Empty).Aggregate((a, b) => string.Concat(a, ", ", b));

            tags = (data?.Description.Tags as IEnumerable<dynamic>)?.DefaultIfEmpty(string.Empty).Aggregate((a, b) => string.Concat(a, ", ", b));
        }
        else if (imageInfo.AITypes.Contains("Florence"))
        {
            caption = imageInfo.FlorenceResults?.Select(a => a.PureText).DefaultIfEmpty(string.Empty).Aggregate((a, b) => string.Concat(a, ", ", b));

            tags = imageInfo.FlorenceResults?.Where(f => f.Polygons != null).SelectMany(a => a.Polygons).Select(p => p.Label).DefaultIfEmpty(string.Empty).Aggregate((a, b) => string.Concat(a, ", ", b));
        }
    }
}